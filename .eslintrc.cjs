/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
  'env': {
    'browser': true,
    'es6': true,
    'node': true,
  },
  'extends': [
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
  ],
  'parser': '@typescript-eslint/parser',
  'parserOptions': {
    'project': ['./tsconfig.json'],
    'sourceType': 'module',
  },
  'plugins': [
    'eslint-plugin-import',
    'eslint-plugin-jsdoc',
    'eslint-plugin-prefer-arrow',
    '@typescript-eslint',
    'unused-imports',
    'file-extension-in-import-ts',
  ],
  'root': true,
  'rules': {
    'comma-dangle': ['error', 'always-multiline'],
    'file-extension-in-import-ts/file-extension-in-import-ts': 'error',
    '@typescript-eslint/member-delimiter-style': ['error', {
      'multiline': {
        'delimiter': 'semi',
        'requireLast': true,
      },
      'singleline': {
        'delimiter': 'semi',
        'requireLast': false,
      },
      'multilineDetection': 'brackets',
    }],
    '@typescript-eslint/no-unused-vars': ['warn', {'destructuredArrayIgnorePattern': '^_'}],
    '@typescript-eslint/unbound-method': 'off',
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/array-type': 'off',
    '@typescript-eslint/ban-types': 'off',
    '@typescript-eslint/consistent-type-assertions': 'error',
    '@typescript-eslint/dot-notation': 'off',
    '@typescript-eslint/explicit-function-return-type': 'off',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/require-await': 'off',
    '@typescript-eslint/no-misused-promises': 'off',
    'unused-imports/no-unused-imports': 'error',
    '@typescript-eslint/naming-convention': [
      'error',
      {
        'selector': 'variable',
        'format': [
          'camelCase',
          'UPPER_CASE',
          'PascalCase',
          'snake_case',
        ],
        'leadingUnderscore': 'allow',
        'trailingUnderscore': 'allow',
      },
    ],
    '@typescript-eslint/no-empty-function': 'off',
    '@typescript-eslint/no-empty-interface': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-misused-new': 'error',
    '@typescript-eslint/no-namespace': 'off',
    '@typescript-eslint/no-parameter-properties': 'off',
    '@typescript-eslint/no-shadow': [
      'error',
      {
        'hoist': 'all',
      },
    ],
    '@typescript-eslint/no-unused-expressions': 'error',
    '@typescript-eslint/no-use-before-define': 'off',
    '@typescript-eslint/no-var-requires': 'error',
    '@typescript-eslint/prefer-for-of': 'error',
    '@typescript-eslint/prefer-function-type': 'error',
    '@typescript-eslint/prefer-namespace-keyword': 'error',
    '@typescript-eslint/quotes': [
      'error',
      'single',
    ],
    '@typescript-eslint/triple-slash-reference': [
      'error',
      {
        'path': 'always',
        'types': 'prefer-import',
        'lib': 'always',
      },
    ],
    '@typescript-eslint/typedef': 'off',
    '@typescript-eslint/unified-signatures': 'error',
    'comma-spacing': ['error', {
      'before': false,
      'after': true,
    }],
    'brace-style': [
      'error',
      '1tbs',
      {
        'allowSingleLine': true,
      },
    ],
    'complexity': 'off',
    'constructor-super': 'error',
    'dot-notation': 'off',
    'eqeqeq': [
      'off',
      'always',
    ],
    'guard-for-in': 'error',
    'id-denylist': [
      'error',
      'Number',
      'number',
      'String',
      'string',
      'Boolean',
      'boolean',
      'Undefined',
      'undefined',
    ],
    'id-match': 'error',
    'import/order': [
      'off',
      {
        'alphabetize': {
          'caseInsensitive': true,
          'order': 'asc',
        },
        'newlines-between': 'ignore',
        'groups': [
          [
            'builtin',
            'external',
            'internal',
            'unknown',
            'object',
            'type',
          ],
          'parent',
          [
            'sibling',
            'index',
          ],
        ],
        'distinctGroup': false,
        'pathGroupsExcludedImportTypes': [],
        'pathGroups': [{
          'pattern': './',
          'patternOptions': {
            'nocomment': true,
            'dot': true,
          },
          'group': 'sibling',
          'position': 'before',
        },
        {
          'pattern': '.',
          'patternOptions': {
            'nocomment': true,
            'dot': true,
          },
          'group': 'sibling',
          'position': 'before',
        },
        {
          'pattern': '..',
          'patternOptions': {
            'nocomment': true,
            'dot': true,
          },
          'group': 'parent',
          'position': 'before',
        },
        {
          'pattern': '../',
          'patternOptions': {
            'nocomment': true,
            'dot': true,
          },
          'group': 'parent',
          'position': 'before',
        },
        ],
      },
    ],
    'jsdoc/check-alignment': 'error',
    'jsdoc/check-indentation': 'error',
    'jsdoc/newline-after-description': 'error',
    'max-classes-per-file': 'off',
    'indent': ['error', 2, {'SwitchCase': 1, 'MemberExpression': 1,
      'ignoredNodes': [
        'FunctionExpression > .params[decorators.length > 0]',
        'FunctionExpression > .params > :matches(Decorator, :not(:first-child))',
        'ClassBody.body > PropertyDefinition[decorators.length > 0] > .key',
      ]}],
    'max-len': 'off',
    'new-parens': 'error',
    'no-caller': 'error',
    'no-cond-assign': 'error',
    'no-console': [
      'error',
      {
        'allow': [
          'warn',
          'dir',
          'time',
          'timeEnd',
          'timeLog',
          'trace',
          'assert',
          'clear',
          'count',
          'countReset',
          'group',
          'groupEnd',
          'table',
          'debug',
          'info',
          'dirxml',
          'error',
          'groupCollapsed',
          'Console',
          'profile',
          'profileEnd',
          'timeStamp',
          'context',
        ],
      },
    ],
    'no-debugger': 'error',
    'no-empty': 'off',
    'no-empty-function': 'off',
    'no-eval': 'error',
    'no-fallthrough': 'off',
    'no-invalid-this': 'off',
    'no-new-wrappers': 'error',
    'no-shadow': 'off',
    'no-throw-literal': 'error',
    'no-trailing-spaces': 'error',
    'no-undef-init': 'error',
    'no-underscore-dangle': 'off',
    'no-unsafe-finally': 'error',
    'no-unused-expressions': 'off',
    'no-unused-labels': 'error',
    'no-use-before-define': 'off',
    'no-var': 'error',
    'object-curly-spacing': 'error',
    'object-shorthand': 'error',
    'one-var': [
      'error',
      'never',
    ],
    'semi': ['error', 'always'],
    'prefer-arrow/prefer-arrow-functions': 'error',
    'prefer-const': 'error',
    'quotes': 'off',
    'radix': 'error',
    'spaced-comment': [
      'error',
      'always',
      {
        'markers': [
          '/',
        ],
      },
    ],
    'use-isnan': 'error',
    'valid-typeof': 'off',
  },
};
